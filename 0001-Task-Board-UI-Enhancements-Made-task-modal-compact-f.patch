From bbc3121ab6079e8785e41d9aef7eec7110d07f06 Mon Sep 17 00:00:00 2001
From: SHINO-01 <sakifhussain33@gmail.com>
Date: Mon, 2 Jun 2025 10:54:46 +0000
Subject: [PATCH] Task Board UI Enhancements: Made task modal compact, fixed
 assignee selection, improved task visibility with status mapping, added
 status field to task form

---
 backend/server.js                             |   2 +
 src/api/joinRequest.js                        |  31 +-
 src/api/startup.js                            |  14 +
 src/config/api.js                             |   2 +-
 .../components/Startups/TaskBoard.css         | 122 ++++-
 .../components/Startups/TaskBoard.js          | 437 +++++++++++++-----
 .../dashboard/components/WelcomeMark/index.js |   2 +-
 src/layouts/my-join-requests/index.js         |   6 +-
 8 files changed, 468 insertions(+), 148 deletions(-)

diff --git a/backend/server.js b/backend/server.js
index 7963f32..2115cb4 100644
--- a/backend/server.js
+++ b/backend/server.js
@@ -49,6 +49,8 @@ const allowedOrigins = [
   'http://localhost:3003',
   'http://localhost:3004',
   'https://sfmanagers.com',
+  'https://api.sfmanagers.com',
+  'http://api.sfmanagers.com',
   'http://sfmanagers.com'
 ];
 
diff --git a/src/api/joinRequest.js b/src/api/joinRequest.js
index 73cebd6..148e86f 100644
--- a/src/api/joinRequest.js
+++ b/src/api/joinRequest.js
@@ -1,13 +1,16 @@
 import { authAxios } from '../config/axiosConfig';
 import { API_ENDPOINTS } from '../config/api';
+import { addMemberToStartup } from './startup';
+
+
 
 // Create a new join request
-export const createJoinRequest = async (startupId, message) => {
+export const createJoinRequest = async (roleId, message) => {
   try {
-    const response = await authAxios.post(`${API_ENDPOINTS.JOIN_REQUESTS}`, {
-      startupId,
-      message,
-    });
+    const response = await authAxios.post(
+      API_ENDPOINTS.JOIN_REQUESTS,
+      { roleId, message }
+    );
     return response.data;
   } catch (error) {
     console.error('Error creating join request:', error);
@@ -32,7 +35,7 @@ export const getStartupJoinRequests = async (startupId) => {
 export const getUserJoinRequests = async () => {
   try {
     const response = await authAxios.get(
-        `${API_ENDPOINTS.JOIN_REQUESTS}/me`
+      `${API_ENDPOINTS.JOIN_REQUESTS}/me`
     );
     return response.data;
   } catch (error) {
@@ -48,6 +51,13 @@ export const updateJoinRequestStatus = async (requestId, status) => {
       `${API_ENDPOINTS.JOIN_REQUESTS}/${requestId}`,
       { status }
     );
+    
+    // If the status is 'accepted', add the user as a member of the startup
+    if (status === 'accepted') {
+      const joinRequest = response.data;
+      await addMemberToStartup(joinRequest.startupId, joinRequest.userId, joinRequest.roleId);
+    }
+    
     return response.data;
   } catch (error) {
     console.error('Error updating join request status:', error);
@@ -59,7 +69,7 @@ export const updateJoinRequestStatus = async (requestId, status) => {
 export const deleteJoinRequest = async (requestId) => {
   try {
     const response = await authAxios.delete(
-      `${API_URL}/${requestId}`
+      `${API_ENDPOINTS.JOIN_REQUESTS}/${requestId}`
     );
     return response.data;
   } catch (error) {
@@ -72,7 +82,7 @@ export const deleteJoinRequest = async (requestId) => {
 export const getReceivedJoinRequests = async () => {
   try {
     const response = await authAxios.get(
-      `${API_ENDPOINTS.JOIN_REQUESTS}/received`,
+      `${API_ENDPOINTS.JOIN_REQUESTS}/received`
     );
     return response.data;
   } catch (error) {
@@ -84,9 +94,8 @@ export const getReceivedJoinRequests = async () => {
 // Get stub join requests (fallback)
 // export const getJoinRequestsStub = async () => {
 //   try {
-//     const response = await axios.get(
-//       `${API_URL}/me/stub`,
-//       getAuthHeader()
+//     const response = await authAxios.get(
+//       `${API_ENDPOINTS.JOIN_REQUESTS}/me/stub`
 //     );
 //     return response.data;
 //   } catch (error) {
diff --git a/src/api/startup.js b/src/api/startup.js
index 2a65e28..870c2e3 100644
--- a/src/api/startup.js
+++ b/src/api/startup.js
@@ -130,3 +130,17 @@ export const publicPreview = async (startupId) => {
     throw error;
   }
 };
+
+// Function to add a member to a startup
+export const addMemberToStartup = async (startupId, userId, roleId) => {
+  try {
+    const response = await authAxios.post(`${API_ENDPOINTS.STARTUPS}/${startupId}/members`, {
+      userId,
+      roleId
+    });
+    return response.data; // Return the added member data
+  } catch (error) {
+    console.error('Error adding member to startup:', error);
+    throw error;
+  }
+};
diff --git a/src/config/api.js b/src/config/api.js
index a289817..617830e 100644
--- a/src/config/api.js
+++ b/src/config/api.js
@@ -1,5 +1,5 @@
 //Here You can change the base url to the server url
-const BASE_URL = 'http://178.63.181.2/api';
+const BASE_URL = 'https://api.sfmanagers.com/api';
 
 
 
diff --git a/src/layouts/dashboard/components/Startups/TaskBoard.css b/src/layouts/dashboard/components/Startups/TaskBoard.css
index 559ee7a..9724e61 100644
--- a/src/layouts/dashboard/components/Startups/TaskBoard.css
+++ b/src/layouts/dashboard/components/Startups/TaskBoard.css
@@ -1,27 +1,55 @@
 .task-board {
   padding: 24px;
-  height: 100%;
-  background-color: #f5f5f5;
+  background-color: #0b1437;
+  border-radius: 20px;
+  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
+  margin-bottom: 24px;
+  min-height: calc(100vh - 120px);
+  width: 100%;
   position: relative;
+  overflow-y: auto;
+}
+
+.task-board-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  padding: 16px 0;
+  margin-bottom: 16px;
+  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
+}
+
+.header-left {
+  display: flex;
+  align-items: center;
+}
+
+.header-right {
+  display: flex;
+  align-items: center;
 }
 
 .task-board-container {
   display: flex;
   gap: 24px;
   overflow-x: auto;
-  padding-bottom: 16px;
+  padding: 16px 0;
+  height: calc(100vh - 200px);
+  margin-top: 0;
 }
 
 .task-column {
-  min-width: 300px;
+  min-width: 280px;
   padding: 16px;
   border-radius: 12px;
-  background-color: rgb(55, 21, 123);
+  background-color: #111c44;
   border: 1px solid rgba(112, 144, 176, 0.1);
   flex-shrink: 0;
   display: flex;
   flex-direction: column;
-  max-height: calc(100vh - 200px);
+  max-height: calc(100vh - 240px);
+  margin-bottom: 16px;
+  width: 300px;
 }
 
 .task-column-header {
@@ -138,11 +166,15 @@
 }
 
 .task-dialog-header {
-  padding: 16px 24px;
+  padding: 16px 20px;
   border-bottom: 1px solid rgba(112, 144, 176, 0.1);
   display: flex;
   align-items: center;
   justify-content: space-between;
+  background-color: #1a1035;
+  color: white;
+  border-top-left-radius: 20px;
+  border-top-right-radius: 20px;
 }
 
 .task-dialog-title {
@@ -151,15 +183,23 @@
 }
 
 .task-dialog-content {
-  padding: 24px;
+  padding: 20px;
+  flex: 1;
+  overflow-y: auto;
+  display: flex;
+  flex-direction: column;
+  width: 100%;
 }
 
 .task-dialog-actions {
-  padding: 16px 24px;
+  padding: 12px 20px;
   border-top: 1px solid rgba(112, 144, 176, 0.1);
   display: flex;
   justify-content: flex-end;
   gap: 16px;
+  background-color: #1a1035;
+  border-bottom-left-radius: 20px;
+  border-bottom-right-radius: 20px;
 }
 
 /* Form styles */
@@ -169,16 +209,28 @@
 
 .form-label {
   display: block;
-  margin-bottom: 8px;
-  font-weight: 500;
+  margin-bottom: 10px;
+  font-weight: 600;
+  color: #333;
 }
 
 .form-input {
   width: 100%;
-  padding: 8px 12px;
+  padding: 12px 16px;
   border: 1px solid #ddd;
-  border-radius: 8px;
+  border-radius: 12px;
   font-size: 1rem;
+  background-color: #f9f9f9;
+  transition: all 0.3s ease;
+}
+
+.mui-select-container .MuiOutlinedInput-root {
+  border-radius: 12px;
+  background-color: #f9f9f9;
+}
+
+.assignee-select {
+  min-height: 56px;
 }
 
 .form-input:focus {
@@ -269,12 +321,26 @@
 
 .task-dialog {
   background-color: white;
-  border-radius: 20px;
   width: 90%;
   max-width: 600px;
   max-height: 90vh;
   overflow-y: auto;
-  box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.15);
+  box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.2);
+  animation: dialogFadeIn 0.3s ease-out;
+  display: flex;
+  flex-direction: column;
+  border-radius: 20px;
+}
+
+@keyframes dialogFadeIn {
+  from {
+    opacity: 0;
+    transform: translateY(20px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0);
+  }
 }
 
 /* Form layout */
@@ -386,6 +452,32 @@ select[multiple] option:checked {
   color: white;
 }
 
+/* Enhanced MUI Select styling */
+.MuiMenuItem-root {
+  display: flex;
+  align-items: center;
+  padding: 12px 16px;
+}
+
+.MuiChip-root {
+  margin: 2px;
+  background-color: #4318FF !important;
+  color: white !important;
+}
+
+.MuiChip-avatar {
+  color: white !important;
+  background-color: rgba(255, 255, 255, 0.2) !important;
+}
+
+.MuiChip-deleteIcon {
+  color: rgba(255, 255, 255, 0.7) !important;
+}
+
+.MuiChip-deleteIcon:hover {
+  color: white !important;
+}
+
 /* Responsive adjustments */
 @media (max-width: 768px) {
   .form-row {
diff --git a/src/layouts/dashboard/components/Startups/TaskBoard.js b/src/layouts/dashboard/components/Startups/TaskBoard.js
index 4612e5a..0b83ac5 100644
--- a/src/layouts/dashboard/components/Startups/TaskBoard.js
+++ b/src/layouts/dashboard/components/Startups/TaskBoard.js
@@ -24,14 +24,19 @@ import {
   Switch,
   OutlinedInput,
   Snackbar,
-  Alert
+  Alert,
+  Checkbox,
+  ListItemText,
+  Avatar
 } from "@mui/material";
 import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
 import CloseIcon from "@mui/icons-material/Close";
 import AddIcon from "@mui/icons-material/Add";
 import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
 import PersonIcon from "@mui/icons-material/Person";
-import { createTask, updateTaskStatus, getStartupTasks } from "../../../../api/task.js"; // Adjust the import path as necessary  
+import ArrowBackIcon from "@mui/icons-material/ArrowBack";
+import { createTask, updateTaskStatus, getStartupTasks } from "../../../../api/task.js"; // Adjust the import path as necessary
+import { getStartupMembers } from "../../../../api/startup.js"; // Import for fetching startup members
 import "./TaskBoard.css";
 import TaskDetailsDialog from './TaskDetailsDialog';
 
@@ -44,6 +49,15 @@ const MenuProps = {
       width: 250,
     },
   },
+  anchorOrigin: {
+    vertical: 'bottom',
+    horizontal: 'left',
+  },
+  transformOrigin: {
+    vertical: 'top',
+    horizontal: 'left',
+  },
+  getContentAnchorEl: null,
 };
 
 const getPriorityColor = (priority) => {
@@ -123,7 +137,66 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
   const [selectedTask, setSelectedTask] = useState(null);
   const [taskDetailsOpen, setTaskDetailsOpen] = useState(false);
 
+  // State for storing fetched members and tasks if not provided via props
+  const [localMembers, setLocalMembers] = useState([]);
+  const [localTasks, setLocalTasks] = useState([]);
+  
+  // Fetch startup members if not provided via props
+  useEffect(() => {
+    const fetchStartupMembers = async () => {
+      if (!members || members.length === 0) {
+        try {
+          console.log('Fetching startup members for startup ID:', startupId);
+          const response = await getStartupMembers(startupId);
+          console.log('Fetched startup members:', response);
+          setLocalMembers(response);
+        } catch (error) {
+          console.error('Error fetching startup members:', error);
+          setError('Failed to load team members');
+        }
+      }
+    };
+    
+    fetchStartupMembers();
+  }, [startupId, members]);
+  
+  // Fetch startup tasks if not provided via props
   useEffect(() => {
+    const fetchStartupTasks = async () => {
+      if (!tasks || tasks.length === 0) {
+        try {
+          setLoading(true);
+          console.log('Fetching tasks for startup ID:', startupId);
+          const response = await getStartupTasks(startupId);
+          console.log('Fetched startup tasks:', response);
+          setLocalTasks(response);
+        } catch (error) {
+          console.error('Error fetching startup tasks:', error);
+          setError('Failed to load tasks');
+        } finally {
+          setLoading(false);
+        }
+      }
+    };
+    
+    fetchStartupTasks();
+  }, [startupId, tasks]);
+  
+  // Use provided members or fallback to locally fetched members
+  const availableMembers = members && members.length > 0 ? members : localMembers;
+  
+  // Use provided tasks or fallback to locally fetched tasks
+  const availableTasks = tasks && tasks.length > 0 ? tasks : localTasks;
+  
+  useEffect(() => {
+    // Log members to debug
+    console.log('Members available for task assignment:', availableMembers);
+    
+    // Debug logging for tasks
+    console.log('Tasks received by TaskBoard component:', tasks);
+    console.log('Local tasks fetched:', localTasks);
+    console.log('Available tasks to display:', availableTasks);
+    
     const newColumns = {
       todo: { id: 'todo', title: 'To Do', tasks: [] },
       inprogress: { id: 'inprogress', title: 'In Progress', tasks: [] },
@@ -137,7 +210,14 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
         task.description?.toLowerCase().includes("meeting link");
     };
 
-    tasks.forEach(task => {
+    // Use availableTasks instead of tasks
+    if (!availableTasks || availableTasks.length === 0) {
+      console.warn('No tasks available to display');
+      setLoading(false);
+      return;
+    }
+
+    availableTasks.forEach(task => {
       if (isMeetingTask(task)) {
         console.log("Skipping meeting task:", task.title);
         return; // ❌ Skip meeting tasks
@@ -156,7 +236,26 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
         hourlyRate,
       } = task;
 
-      const statusKey = statusName ? statusName.toLowerCase().replace(" ", "") : 'unknown';
+      // Map status ID or name to column key
+      let statusKey = 'todo'; // Default to todo
+      
+      // First try to map by statusName if available
+      if (statusName) {
+        statusKey = statusName.toLowerCase().replace(/ /g, "");
+      } 
+      // If no statusName, try to map by status ID
+      else if (task.status_id) {
+        // Map status_id to column keys
+        const statusMap = {
+          1: 'todo',        // To Do
+          2: 'inprogress', // In Progress
+          3: 'review',     // Review
+          4: 'done'        // Done
+        };
+        statusKey = statusMap[task.status_id] || 'todo';
+      }
+      
+      console.log(`Task ${title} has status_id: ${task.status_id}, statusName: ${statusName}, mapped to: ${statusKey}`);
       const taskData = {
         id,
         title,
@@ -174,13 +273,15 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
       if (newColumns[statusKey]) {
         newColumns[statusKey].tasks.push(taskData);
       } else {
-        console.warn(`Unknown status: ${statusKey}`);
+        console.warn(`Unknown status: ${statusKey}, placing task in 'To Do' column`);
+        // If we can't determine the status, put it in the To Do column
+        newColumns.todo.tasks.push(taskData);
       }
     });
 
     setColumns(newColumns);
     setLoading(false);
-  }, [tasks]);
+  }, [availableTasks]); // Updated dependency to use availableTasks
 
   const onDragEnd = async (result) => {
     if (!result.destination) return;
@@ -271,12 +372,18 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
     setNewTask({ ...newTask, [name]: value });
   };
 
-  const handleAssigneeChange = (e) => {
-    const { value } = e.target;
+  const handleAssigneeChange = (event) => {
+    const {
+      target: { value },
+    } = event;
     setNewTask({
       ...newTask,
       assignees: typeof value === 'string' ? value.split(',') : value,
     });
+    setErrors({
+      ...errors,
+      assignees: value.length === 0 ? 'Please select at least one assignee' : ''
+    });
   };
 
   const handleDateChange = (name, value) => {
@@ -296,120 +403,142 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
   const validateForm = () => {
     const newErrors = {};
     
-    if (!newTask.title?.trim()) {
+    if (!newTask.title.trim()) {
       newErrors.title = 'Title is required';
     }
     
-    if (!newTask.description?.trim()) {
+    if (!newTask.description.trim()) {
       newErrors.description = 'Description is required';
     }
     
+    if (!newTask.priority) {
+      newErrors.priority = 'Priority is required';
+    }
+    
     if (!newTask.startDate) {
-      newErrors.startDate = 'Start Date is required';
+      newErrors.startDate = 'Start date is required';
     }
     
     if (!newTask.dueDate) {
-      newErrors.dueDate = 'Due Date is required';
+      newErrors.dueDate = 'Due date is required';
+    } else if (newTask.startDate && new Date(newTask.dueDate) < new Date(newTask.startDate)) {
+      newErrors.dueDate = 'Due date cannot be before start date';
     }
     
-    if (newTask.startDate && newTask.dueDate && new Date(newTask.startDate) > new Date(newTask.dueDate)) {
-      newErrors.startDate = 'Start date cannot be after due date.';
-      newErrors.dueDate = 'Due date cannot be before start date.';
+    if (!newTask.assignees || newTask.assignees.length === 0) {
+      newErrors.assignees = 'At least one assignee is required';
     }
     
     if (newTask.isFreelance) {
       if (!newTask.estimatedHours || newTask.estimatedHours <= 0) {
-        newErrors.estimatedHours = 'Estimated Hours must be greater than 0';
+        newErrors.estimatedHours = 'Valid estimated hours are required for freelance tasks';
       }
+      
       if (!newTask.hourlyRate || newTask.hourlyRate <= 0) {
-        newErrors.hourlyRate = 'Hourly Rate must be greater than 0';
+        newErrors.hourlyRate = 'Valid hourly rate is required for freelance tasks';
       }
     }
-
+    
     setErrors(newErrors);
     return Object.keys(newErrors).length === 0;
   };
 
   const handleAddTask = async () => {
-    if (validateForm()) {
-      setIsSubmitting(true);
-      try {
-        // Find the status ID based on the status name
-        const statusObj = taskStatuses?.find(status => 
-          status?.name?.replace(/\s+/g, '').toLowerCase() === newTask.status?.replace(/\s+/g, '').toLowerCase()
-        );
-        
-        if (!statusObj) {
-          throw new Error('Invalid task status');
-        }
-
-        const taskData = {
-          title: newTask.title?.trim(),
-          description: newTask.description?.trim(),
-          startDate: newTask.startDate,
-          dueDate: newTask.dueDate,
-          priority: newTask.priority?.toLowerCase(),
-          statusId: statusObj.id,
-          assigneeIds: newTask.assignees?.map(id => members?.find(member => member?.id === id)?.id).filter(Boolean) || [],
-          startupId: startupId,
-          isFreelance: newTask.isFreelance,
-          estimatedHours: newTask.isFreelance ? newTask.estimatedHours : null,
-          hourlyRate: newTask.isFreelance ? newTask.hourlyRate : null,
+    if (!validateForm()) return;
+    
+    setIsSubmitting(true);
+    
+    try {
+      // Create base task data
+      const taskData = {
+        title: newTask.title,
+        description: newTask.description,
+        priority: newTask.priority,
+        startDate: newTask.startDate,
+        dueDate: newTask.dueDate,
+        statusId: 1, // Default to 'To Do' status
+        startupId: startupId,
+        assignees: newTask.assignees, // Send all assignees as an array
+        isFreelance: newTask.isFreelance,
+      };
+      
+      if (newTask.isFreelance) {
+        taskData.estimatedHours = parseFloat(newTask.estimatedHours);
+        taskData.hourlyRate = parseFloat(newTask.hourlyRate);
+      }
+      
+      // Create task
+      const createdTask = await createTask(taskData);
+      
+      // Map assignee IDs to names and create assignee objects
+      const assigneeObjects = newTask.assignees.map(assigneeId => {
+        const member = members.find(m => m.id === assigneeId);
+        return {
+          id: assigneeId,
+          name: member ? member.name : 'Unknown User',
+          avatar: member ? member.avatar : null
         };
-
-        const createdTask = await createTask(taskData);
-        await getStartupTasks(startupId);
-        
-        if (!createdTask) {
-          throw new Error('Failed to create task');
-        }
-
-        // Update the columns with the new task
-        setColumns(prevColumns => {
-          const statusKey = statusObj.name?.toLowerCase().replace(/\s+/g, '');
-          if (!prevColumns[statusKey]) {
-            console.warn(`Unknown status key: ${statusKey}`);
-            return prevColumns;
+      });
+      
+      // Update local state
+      const newTaskWithDetails = {
+        ...createdTask,
+        status: 'todo',
+        assignees: assigneeObjects,
+      };
+      
+      setColumns(prev => {
+        const updatedTodoTasks = [...prev.todo.tasks, newTaskWithDetails];
+        return {
+          ...prev,
+          todo: {
+            ...prev.todo,
+            tasks: updatedTodoTasks
           }
-
-          return {
-            ...prevColumns,
-            [statusKey]: {
-              ...prevColumns[statusKey],
-              tasks: [...prevColumns[statusKey].tasks, createdTask],
-            },
-          };
-        });
-
-        // Show success message with more prominent styling
-        setSnackbar({
-          open: true,
-          message: '🎉 Task created successfully!',
-          severity: 'success',
-          vertical: 'top',
-          horizontal: 'center'
-        });
-
-        handleClose();
-      } catch (error) {
-        console.error("Error creating task:", error);
-        setError(error.message || 'Failed to create task. Please try again.');
-        // Show error message
-        setSnackbar({
-          open: true,
-          message: '❌ ' + (error.message || 'Failed to create task. Please try again.'),
-          severity: 'error',
-          vertical: 'top',
-          horizontal: 'center'
-        });
-      } finally {
-        setIsSubmitting(false);
-      }
+        };
+      });
+      
+      // Show success message
+      setSnackbar({
+        open: true,
+        message: 'Task created successfully!',
+        severity: 'success',
+        vertical: 'top',
+        horizontal: 'center'
+      });
+      
+      // Reset form
+      setNewTask({
+        title: '',
+        description: '',
+        priority: 'Low',
+        startDate: '',
+        dueDate: '',
+        status: 'To Do',
+        assignees: [],
+        isFreelance: false,
+        estimatedHours: '',
+        hourlyRate: '',
+      });
+      
+      // Close dialog
+      handleClose();
+    } catch (err) {
+      console.error('Error creating task:', err);
+      setSnackbar({
+        open: true,
+        message: 'Failed to create task: ' + (err.message || 'Unknown error'),
+        severity: 'error',
+        vertical: 'top',
+        horizontal: 'center'
+      });
+    } finally {
+      setIsSubmitting(false);
     }
   };
 
   const findAssigneeNames = (assigneeIds) => {
-    return assigneeIds.map(id => members.find(member => member.id === id)?.name).filter(name => name !== undefined);
+    return assigneeIds.map(id => availableMembers.find(member => member.id === id)?.name).filter(name => name !== undefined);
   };
   
   const handleCloseSnackbar = (event, reason) => {
@@ -439,6 +568,17 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
 
   return (
     <div className="task-board">
+      <div className="task-board-header">
+        <div className="header-left">
+          <Typography variant="h4" sx={{ color: '#fff', fontWeight: 600 }}>
+            Task Board
+          </Typography>
+        </div>
+        <div className="header-right">
+          {/* Additional header controls could go here */}
+        </div>
+      </div>
+
       {error && (
         <div className="error-message">
           <p>{error}</p>
@@ -526,7 +666,7 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
             <div className="task-dialog-header">
               <h2 className="task-dialog-title">Add New Task</h2>
               <button onClick={handleClose} className="close-button">
-                <CloseIcon />
+                <CloseIcon fontSize="large" />
               </button>
             </div>
             <div className="task-dialog-content">
@@ -556,18 +696,38 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
                 {errors.description && <p className="form-error">{errors.description}</p>}
               </div>
 
-              <div className="form-group">
-                <label className="form-label">Priority</label>
-                <select
-                  name="priority"
-                  value={newTask.priority}
-                  onChange={handleInputChange}
-                  className="form-input"
-                >
-                  <option value="High">High</option>
-                  <option value="Medium">Medium</option>
-                  <option value="Low">Low</option>
-                </select>
+              <div className="form-row">
+                <div className="form-col">
+                  <div className="form-group">
+                    <label className="form-label">Priority</label>
+                    <select
+                      name="priority"
+                      value={newTask.priority}
+                      onChange={handleInputChange}
+                      className="form-input"
+                    >
+                      <option value="High">High</option>
+                      <option value="Medium">Medium</option>
+                      <option value="Low">Low</option>
+                    </select>
+                  </div>
+                </div>
+                <div className="form-col">
+                  <div className="form-group">
+                    <label className="form-label">Status</label>
+                    <select
+                      name="status"
+                      value={newTask.status}
+                      onChange={handleInputChange}
+                      className="form-input"
+                    >
+                      <option value="todo">To Do</option>
+                      <option value="inprogress">In Progress</option>
+                      <option value="review">Review</option>
+                      <option value="done">Done</option>
+                    </select>
+                  </div>
+                </div>
               </div>
 
               <div className="form-group">
@@ -599,19 +759,62 @@ const TaskBoard = ({ startupId, tasks, members, taskStatuses }) => {
 
               <div className="form-group">
                 <label className="form-label">Assignees</label>
-                <select
-                  multiple
-                  name="assignees"
-                  value={newTask.assignees}
-                  onChange={handleAssigneeChange}
-                  className="form-input"
-                >
-                  {members.map((member) => (
-                    <option key={member.id} value={member.id}>
-                      {member.name}
-                    </option>
-                  ))}
-                </select>
+                <FormControl fullWidth className="mui-select-container">
+                  <Select
+                    multiple
+                    value={newTask.assignees}
+                    onChange={handleAssigneeChange}
+                    input={<OutlinedInput />}
+                    displayEmpty
+                    renderValue={(selected) => {
+                      if (selected.length === 0) {
+                        return <em>Select team members</em>;
+                      }
+                      return (
+                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
+                          {selected.map((value) => {
+                            const member = availableMembers.find(m => m.id === value);
+                            return (
+                              <Chip 
+                                key={value} 
+                                label={member ? member.name : value}
+                                avatar={member && member.avatar ? 
+                                  <Avatar alt={member.name} src={member.avatar} /> : 
+                                  <Avatar>{member ? member.name.charAt(0) : '?'}</Avatar>
+                                }
+                                size="small"
+                              />
+                            );
+                          })}
+                        </Box>
+                      );
+                    }}
+                    MenuProps={{
+                      PaperProps: {
+                        style: {
+                          maxHeight: 224,
+                          width: 250,
+                        },
+                      },
+                    }}
+                    className="assignee-select"
+                  >
+                    {availableMembers && availableMembers.length > 0 ? (
+                      availableMembers.map((member) => (
+                        <MenuItem key={member.id} value={member.id}>
+                          <Checkbox checked={newTask.assignees.indexOf(member.id) > -1} />
+                          <ListItemText 
+                            primary={member.name} 
+                            secondary={member.role || 'Team Member'} 
+                          />
+                        </MenuItem>
+                      ))
+                    ) : (
+                      <MenuItem disabled>No team members available</MenuItem>
+                    )}
+                  </Select>
+                </FormControl>
+                {errors.assignees && <p className="form-error">{errors.assignees}</p>}
               </div>
 
               <div className="form-group">
diff --git a/src/layouts/dashboard/components/WelcomeMark/index.js b/src/layouts/dashboard/components/WelcomeMark/index.js
index 395d254..7031efc 100644
--- a/src/layouts/dashboard/components/WelcomeMark/index.js
+++ b/src/layouts/dashboard/components/WelcomeMark/index.js
@@ -122,7 +122,7 @@ const WelcomeMark = ({ name }) => {
           {name}
         </h3>
         <p style={getTypographyStyles("h6", "text", "regular", "auto")}>
-          Glad to see you again!
+          Glad to see you agains !
           <br /> Ask me anything.
         </p>
       </div>
diff --git a/src/layouts/my-join-requests/index.js b/src/layouts/my-join-requests/index.js
index b8ae59c..013b0ac 100644
--- a/src/layouts/my-join-requests/index.js
+++ b/src/layouts/my-join-requests/index.js
@@ -150,10 +150,10 @@ const MyJoinRequests = () => {
 
   const handleStatusUpdate = async (requestId, status) => {
     try {
-      // Commented out API call
-      // await updateJoinRequestStatus(requestId, status);
+      // Make the actual API call to update status and add member if accepted
+      await updateJoinRequestStatus(requestId, status);
       
-      // Simulate status update with dummy data
+      // Update UI state
       setReceivedRequests(prevRequests => 
         prevRequests.map(request => 
           request.id === requestId 
-- 
2.34.1

