generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://hdadmin_sfm:25Y7Pwsd6UKEh4kTEsAC@localhost:3306/hdadmin_sfm"
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String
  password          String
  points            Int                 @default(0)
  level             Int                 @default(1)
  headline          String?
  bio               String?
  location          String?
  profileImage      String?
  linkedinUrl       String?
  githubUrl         String?
  portfolio         String?
  phone             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  token             String?             @db.VarChar(255)
  AffiliateLink     AffiliateLink[]
  education         Education[]         @relation("UserEducation")
  experience        Experience[]        @relation("UserExperience")
  receivedRequests  JoinRequest[]       @relation("ReceivedRequests")
  sentRequests      JoinRequest[]       @relation("SentRequests")
  assignedLeads     Lead[]              @relation("AssignedLeads")
  leadComments      LeadComment[]       @relation("UserComments")
  receivedMessages  Message[]           @relation("ReceivedMessages")
  sentMessages      Message[]           @relation("SentMessages")
  pointsHistory     PointsTransaction[] @relation("UserPoints")
  skills            Skill[]             @relation("UserSkills")
  ownedStartups     Startup[]           @relation("StartupOwner")
  createdTasks      Task[]              @relation("CreatedTasks")
  assignedTasks     TaskAssignee[]      @relation("AssignedTasks")
  timeTrackingLogs  TimeTrackingLog[]   @relation("UserLogs")
  joinedRoles       UserRole[]          @relation("UserRoles")
  meeting_assignees meeting_assignees[]
  meetings          meetings[]
  roles             Role[]              @relation("UserRoles")

  @@map("User")
}

model Startup {
  id            String          @id @default(uuid())
  name          String
  details       String
  stage         String          @default("Idea")
  logo          String?
  logo_url      String?         @db.VarChar(255)
  banner        String?
  banner_url    String?         @db.VarChar(255)
  location      String?
  industry      String?
  ownerId       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  website       String?
  AffiliateLink AffiliateLink[]
  joinRequests  JoinRequest[]   @relation("StartupRequests")
  leads         Lead[]          @relation("StartupLeads")
  opportunities Opportunity[]   @relation("StartupOpportunities")
  roles         Role[]          @relation("StartupRoles")
  owner         User            @relation("StartupOwner", fields: [ownerId], references: [id])
  tasks         Task[]          @relation("StartupTasks")
  taskStatuses  TaskStatus[]    @relation("StartupStatuses")
  userRoles     UserRole[]      @relation("StartupUserRoles")
  meetings      meetings[]

  @@index([ownerId], map: "Startup_ownerId_fkey")
  @@map("Startup")
}

model Role {
  id            String        @id @default(uuid())
  title         String
  roleType      String
  isOpen        Boolean       @default(true)
  isPaid        Boolean       @default(false)
  startupId     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  requests      JoinRequest[] @relation("RoleRequests")
  startup       Startup       @relation("StartupRoles", fields: [startupId], references: [id])
  users         UserRole[]    @relation("RoleUsers")
  assignedUsers User[]        @relation("UserRoles")

  @@index([startupId], map: "Role_startupId_fkey")
  @@map("Role")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  startupId String
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation("RoleUsers", fields: [roleId], references: [id])
  startup   Startup  @relation("StartupUserRoles", fields: [startupId], references: [id])
  user      User     @relation("UserRoles", fields: [userId], references: [id])

  @@unique([userId, roleId])
  @@index([roleId], map: "UserRole_roleId_fkey")
  @@index([startupId], map: "UserRole_startupId_fkey")
  @@map("UserRole")
}

model Task {
  id               String            @id @default(uuid())
  isMeeting        Boolean           @default(false)
  title            String
  description      String
  meetingLink      String?           @db.VarChar(255)
  statusId         String
  priority         String
  dueDate          DateTime?
  startTime        DateTime?         @db.DateTime(0)
  endTime          DateTime?         @db.DateTime(0)
  startupId        String
  createdBy        String
  isTimerRunning   Boolean           @default(false)
  timerStartedAt   DateTime?
  totalTimeSpent   Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isFreelance      Boolean           @default(false)
  estimatedHours   Decimal           @default(0.00) @db.Decimal(8, 2)
  hourlyRate       Decimal           @default(0.00) @db.Decimal(8, 2)
  urgencyLevel     Task_urgencyLevel @default(MEDIUM)
  basePoints       Int               @default(0)
  pointsMultiplier Decimal           @default(1.00) @db.Decimal(3, 2)
  totalPoints      Int               @default(0)
  freelancerId     String?
  creator          User              @relation("CreatedTasks", fields: [createdBy], references: [id])
  startup          Startup           @relation("StartupTasks", fields: [startupId], references: [id])
  status           TaskStatus        @relation("TaskStatus", fields: [statusId], references: [id])
  assignees        TaskAssignee[]    @relation("TaskAssignees")
  timeLogs         TimeTrackingLog[] @relation("TaskLogs")

  @@index([createdBy], map: "Task_createdBy_fkey")
  @@index([startupId], map: "Task_startupId_fkey")
  @@index([statusId], map: "Task_statusId_fkey")
  @@index([isMeeting], map: "idx_isMeeting")
  @@index([estimatedHours], map: "tasks_estimatedHours_idx")
  @@index([urgencyLevel], map: "tasks_urgencyLevel_idx")
  @@map("Task")
}

model TaskStatus {
  id        String   @id @default(uuid())
  name      String
  startupId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]   @relation("TaskStatus")
  startup   Startup  @relation("StartupStatuses", fields: [startupId], references: [id])

  @@index([startupId], map: "TaskStatus_startupId_fkey")
  @@map("TaskStatus")
}

model TaskAssignee {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation("TaskAssignees", fields: [taskId], references: [id])
  user      User     @relation("AssignedTasks", fields: [userId], references: [id])

  @@unique([taskId, userId])
  @@index([userId], map: "TaskAssignee_userId_fkey")
  @@map("TaskAssignee")
}

model TimeTrackingLog {
  id        String    @id @default(uuid())
  taskId    String
  userId    String
  startTime DateTime
  endTime   DateTime?
  duration  Int       @default(0)
  note      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  task      Task      @relation("TaskLogs", fields: [taskId], references: [id])
  user      User      @relation("UserLogs", fields: [userId], references: [id])

  @@index([taskId], map: "TimeTrackingLog_taskId_fkey")
  @@index([userId], map: "TimeTrackingLog_userId_fkey")
  @@map("TimeTrackingLog")
}

model Skill {
  id        String   @id @default(uuid())
  name      String
  level     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserSkills", fields: [userId], references: [id])

  @@index([userId], map: "Skill_userId_fkey")
  @@map("Skill")
}

model Education {
  id        String    @id @default(uuid())
  school    String
  degree    String
  field     String
  startDate DateTime
  endDate   DateTime?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation("UserEducation", fields: [userId], references: [id])

  @@index([userId], map: "Education_userId_fkey")
  @@map("Education")
}

model Experience {
  id          String    @id @default(uuid())
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserExperience", fields: [userId], references: [id])
  
  @@index([userId], map: "Experience_userId_fkey")
  @@map("Experience")
}

model PointsTransaction {
  id        String   @id @default(uuid())
  points    Int
  reason    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserPoints", fields: [userId], references: [id])

  @@index([userId], map: "PointsTransaction_userId_fkey")
  @@map("PointsTransaction")
}

model Lead {
  id             String        @id @default(uuid())
  name           String
  email          String
  phone          String
  status         String
  source         String
  notes          String?
  salesAmount    Float
  nextActionDate DateTime?
  assignedToId   String?
  startupId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assignedTo     User?         @relation("AssignedLeads", fields: [assignedToId], references: [id])
  startup        Startup       @relation("StartupLeads", fields: [startupId], references: [id])
  comments       LeadComment[]

  @@index([assignedToId], map: "Lead_assignedToId_fkey")
  @@index([startupId], map: "Lead_startupId_fkey")
  @@map("Lead")
}

model LeadComment {
  id        String   @id @default(uuid())
  content   String
  leadId    String
  userId    String
  createdAt DateTime @default(now())
  lead      Lead     @relation(fields: [leadId], references: [id])
  user      User     @relation("UserComments", fields: [userId], references: [id])
  
  @@index([leadId], map: "LeadComment_leadId_fkey")
  @@index([userId], map: "LeadComment_userId_fkey")
  @@map("LeadComment")
}

model Opportunity {
  id          String   @id @default(uuid())
  position    String
  experience  String
  description String
  openings    Int      @default(1)
  startupId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startup     Startup  @relation("StartupOpportunities", fields: [startupId], references: [id])

  @@index([startupId], map: "Opportunity_startupId_fkey")
  @@map("Opportunity")
}

model JoinRequest {
  id         String   @id @default(uuid())
  userId     String
  startupId  String
  roleId     String
  status     String
  message    String?
  receiverId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  role       Role     @relation("RoleRequests", fields: [roleId], references: [id])
  startup    Startup  @relation("StartupRequests", fields: [startupId], references: [id])
  user       User     @relation("SentRequests", fields: [userId], references: [id])

  @@index([receiverId], map: "JoinRequest_receiverId_fkey")
  @@index([roleId], map: "JoinRequest_roleId_fkey")
  @@index([startupId], map: "JoinRequest_startupId_fkey")
  @@index([userId], map: "JoinRequest_userId_fkey")
  @@map("JoinRequest")
}

model Message {
  id         String   @id @default(uuid())
  content    String   @db.Text
  senderId   String
  receiverId String
  group_id   String?
  type       String   @default("direct") @db.VarChar(20)
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  groupId    String?  @db.VarChar(36)
  startupId  String?  @db.VarChar(36)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId])
  @@index([senderId])
  @@index([groupId], map: "idx_message_group")
  @@index([startupId], map: "idx_message_startup")
  @@index([group_id], map: "idx_messages_group")
  @@map("Message")
}

model AffiliateLink {
  id             String           @id @default(uuid())
  name           String
  code           String           @unique(map: "code")
  userId         String
  startupId      String
  clicks         Int              @default(0)
  conversions    Int              @default(0)
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime         @default(now()) @updatedAt @db.DateTime(0)
  AffiliateClick AffiliateClick[]
  User           User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "AffiliateLink_ibfk_1")
  Startup        Startup          @relation(fields: [startupId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "AffiliateLink_ibfk_2")

  @@index([startupId], map: "startupId")
  @@index([userId], map: "userId")
  @@map("AffiliateLink")
}

model AffiliateClick {
  id            String        @id
  linkId        String
  ip            String
  userAgent     String?       @db.Text
  referrer      String?       @db.Text
  createdAt     DateTime      @default(now()) @db.DateTime(0)
  AffiliateLink AffiliateLink @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "AffiliateClick_ibfk_1")

  @@index([linkId], map: "linkId")
}

model HourlyRateConfig {
  id          String   @id
  skillType   String
  hourlyRate  Decimal  @db.Decimal(8, 2)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @default(now()) @db.DateTime(0)

  @@index([skillType], map: "hourly_rate_config_skillType_idx")
}

model Notification {
  id        String   @id @db.VarChar(36)
  userId    String   @db.VarChar(36)
  title     String   @db.VarChar(255)
  message   String   @db.Text
  type      String   @db.VarChar(50)
  isRead    Boolean? @default(false)
  data      String?  @db.Text
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)

  @@index([userId], map: "idx_notification_userId")
}

model chat_groups {
  id         String   @id
  name       String   @db.VarChar(255)
  startup_id String   @db.VarChar(36)
  created_by String   @db.VarChar(36)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  @@index([created_by], map: "idx_chat_groups_created_by")
  @@index([startup_id], map: "idx_chat_groups_startup")
}

model documents {
  id          String    @id
  name        String
  description String?   @db.Text
  filePath    String
  fileType    String
  fileSize    Int
  startupId   String
  userId      String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
}

model group_members {
  group_id  String
  user_id   String   @db.VarChar(36)
  joined_at DateTime @default(now()) @db.DateTime(0)

  @@id([group_id, user_id])
  @@index([user_id], map: "idx_group_members_user")
}

model meeting_assignees {
  meeting_id Int
  user_id    String
  meetings   meetings @relation(fields: [meeting_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_meeting_assignees_meeting")
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_meeting_assignees_user")

  @@id([meeting_id, user_id])
  @@index([meeting_id], map: "idx_meeting_id")
  @@index([user_id], map: "idx_user_id")
}

model meetings {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(255)
  description       String?             @db.Text
  meeting_link      String?             @db.VarChar(255)
  start_time        DateTime            @db.DateTime(0)
  end_time          DateTime            @db.DateTime(0)
  startup_id        String
  created_by        String
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  meeting_assignees meeting_assignees[]
  User              User                @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_meetings_creator")
  Startup           Startup             @relation(fields: [startup_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_meetings_startup")

  @@index([created_by], map: "idx_created_by")
  @@index([end_time], map: "idx_end_time")
  @@index([start_time], map: "idx_start_time")
  @@index([startup_id], map: "idx_startup_id")
}

model roles {
  id         String   @id @db.VarChar(36)
  title      String   @db.VarChar(255)
  role_type  String   @db.VarChar(50)
  is_open    Boolean? @default(true)
  is_paid    Boolean? @default(false)
  startup_id String   @db.VarChar(36)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)

  @@index([startup_id], map: "startup_id")
}

enum Task_urgencyLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}
