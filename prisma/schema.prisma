// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  name            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ownedStartups   Startup[]
  sentRequests    StartupRequest[] @relation("UserRequests")
  receivedRequests StartupRequest[] @relation("StartupOwnerRequests")
  joinedRoles     UserRole[]
  assignedTasks   TaskAssignee[]
  createdTasks    Task[]           @relation("CreatedTasks")
  startupMembers  StartupMember[]
}

model Startup {
  id           String           @id @default(uuid())
  name         String
  details      String
  stage        String
  owner        User             @relation(fields: [ownerId], references: [id])
  ownerId      String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  roles        Role[]
  joinRequests StartupRequest[]
  tasks        Task[]
  taskStatuses TaskStatus[]
  members      StartupMember[]
}

model StartupRequest {
  id        String   @id @default(uuid())
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserRequests", fields: [userId], references: [id])
  userId    String
  startup   Startup  @relation(fields: [startupId], references: [id])
  startupId String
  owner     User     @relation("StartupOwnerRequests", fields: [ownerId], references: [id])
  ownerId   String
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startup     Startup   @relation(fields: [startupId], references: [id])
  startupId   String
  userRoles   UserRole[]
}

model UserRole {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String

  @@unique([userId, roleId])
}

model Task {
  id          String        @id @default(uuid())
  title       String
  description String?
  priority    String        @default("medium") // low, medium, high
  dueDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creator     User          @relation("CreatedTasks", fields: [createdBy], references: [id])
  createdBy   String
  startup     Startup       @relation(fields: [startupId], references: [id])
  startupId   String
  status      TaskStatus    @relation(fields: [statusId], references: [id])
  statusId    String
  assignees   TaskAssignee[]
}

model TaskStatus {
  id        String   @id @default(uuid())
  name      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startup   Startup  @relation(fields: [startupId], references: [id])
  startupId String
  tasks     Task[]
}

model TaskAssignee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@unique([taskId, userId])
}

model StartupMember {
  id        String   @id @default(uuid())
  startupId String
  userId    String
  role      String   @default("Employee - Marketing and Sales")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startup   Startup  @relation(fields: [startupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([startupId, userId])
}
